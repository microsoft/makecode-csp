{"componentChunkName":"component---src-templates-docs-js","path":"/unit-5/vocab","result":{"data":{"site":{"siteMetadata":{"title":"MakeCode AP CSP","docsLocation":"https://github.com/microsoft/makecode-csp","docsLocationType":"github","editable":false}},"mdx":{"fields":{"id":"10c6a854-c6d1-5496-b249-0240f9c0d5f3","title":"Unit 5 Vocab","slug":"/unit-5/vocab"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unit 5 Vocab\",\n  \"metaTitle\": \"Unit 5 Vocab\",\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"*All vocab from Unit 3 plus: \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Procedural abstraction\"), \" - provides a name for a process and allows a procedure to be used only knowing what it does, not how it does it; allows a solution to a large problem to be based on the solutions of smaller subproblems.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Modularity\"), \" - the subdivision of a computer program into separate subprograms.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Function/Procedure\"), \" - a named group of programming instructions that may have parameters and return values; also known as method or function.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Parameters\"), \" - input variables of a function/procedure.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Arguments\"), \" - specify the values of the parameters when a procedure is called.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Array or List\"), \" - an ordered sequence of values.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Traversing\"), \" - traversing a list can be complete traversal, where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Linear search (sequential search) algorithms\"), \" - check each element of a list, in order, until the desired value is found or all elements in the list have been checked.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Binary search algorithms\"), \" - starts at the middle of a sorted data set of numbers and eliminates half of the data; this process repeats until the desired value is found or all elements have been eliminated.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Software library\"), \" - contains functions/procedures that may be used in creating new programs.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Application program interfaces (API)\"), \" - are specifications for how programs, functions or procedures behave and can be used by other software.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Simulation\"), \" - a representation that uses varying sets of values to reflect the changing state of a phenomenon.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Problem\"), \"  - a general description of a task that can (or cannot) be solved algorithmically.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Instance\"), \" - specific input of a problem (ex: sorting is a problem; soring the list (2, 3, 1, 7) is an instance of the problem.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Decision problem\"), \" - problem with a yes/no answer (ex: is there a path from A to B?).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Optimization problem\"), \"  - problem with the goal of finding the \\\"best\\\" solution among many. (ex: what is the shortest path from A to B?)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Efficiency\"), \" - an estimation of the amount of computational resources used by an algorithm; typically expressed as a function of the size of the input.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reasonable amount of time\"), \" - algorithms with a polynomial efficiency or slower (constant, linear, square, cube, etc.).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Unreasonable amount of time\"), \" - algorithms with exponential or factorial efficiencies.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Heuristic\"), \" - an approach to a problem that produces a solution that is not guaranteed to be optimal but may be used when techniques that are guaranteed to always find an optimal solution are impractical.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Decidable problem\"), \" - a decision problem for which an algorithm can be written to produce a correct output for all inputs. (ex: \\\"Is the number even?\\\")\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Undecidable problem\"), \" - one for which no algorithm can be constructed that is always capable of providing a correct yes-or-no answer.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"timeToRead":2,"parent":{"__typename":"File","relativePath":"unit-5/vocab.md","fields":{"gitLogLatestAuthorName":"Galen Nickel","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"3 minutes ago"}},"frontmatter":{"metaTitle":"Unit 5 Vocab","showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"e58d2182e4eda146f44eef3444eafe44c346237f","date":"2023-08-18 08:59"}},"pageContext":{"id":"10c6a854-c6d1-5496-b249-0240f9c0d5f3"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}