{"componentChunkName":"component---src-templates-docs-js","path":"/unit-8/review-pages/creative-development","result":{"data":{"site":{"siteMetadata":{"title":"MakeCode AP CSP","docsLocation":"https://github.com/microsoft/makecode-csp","docsLocationType":"github","editable":false}},"mdx":{"fields":{"id":"eb7843ea-5870-560a-a819-d52933075588","title":"Creative Development","slug":"/unit-8/review-pages/creative-development"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creative Development\",\n  \"metaTitle\": \"Creative Development\",\n  \"order\": 0\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Info = makeShortcode(\"Info\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Creative Development Review\"), mdx(Info, {\n    mdxType: \"Info\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CRD Conceptual Framework\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://apcentral.collegeboard.org/pdf/ap-computer-science-principles-course-and-exam-description.pdf#page=222\"\n  }), \"Big Idea 1: Creative Development (CRD)\")))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"1. Collaboration\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A computing innovation includes a program as an integral part of its function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Collaboration with a diverse group helps avoid bias.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consultation and communication with users are important aspects of developing computing innovations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Information gathered from users can help understand the purpose of a computing innovation and help develop a program that incorporates diverse perspectives.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Online tools support collaboration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pair programming is a common model of collaboration for programmers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Effective collaborative teams must practice interpersonal skills including communication, consensus building, conflict resolution, and negotiation.\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"2. Program Function and Purpose\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The purpose of computing innovations is to solve problems or to pursue interests through creative expression.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An understanding of the purpose of a computing innovation helps programmers better develop that innovation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A program is a collection of program statements that performs a specific task when run by a computer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A program is often referred to as software.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A code segment is a collection of program statements that is part of a program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A program needs to work for a variety of inputs and situations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The behavior of a program is how a program functions during execution and is often describe by how a user interacts with it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A program can be described broadly by what it does, or in more detail by both what the program does and how the program statements accomplish this function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program inputs are data sent to a computer for processing by a program. Input can come in a variety of forms, such as tactile, audio, visual, or text.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An event is associated with an action and supplies input data to a program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Events can be generated when a key is pressed, a mouse is clicked, a program is started, or any other defined action that affects the flow of execution.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inputs usually affect the output produced by a program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In event-driven programming, program statements are executed when triggered rather than through the sequential flow of control.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input can come from a user or other programs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program outputs are any data sent from a program to a device. Program output can come in a variety of forms, such as tactile, audio, visual, or text.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program output is usually based on a program\\u2019s input or prior state (e.g., internal values).\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"3. Program Design and Development\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A development process can be ordered and intentional, or exploratory in nature.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are multiple development processes. The following phases are commonly used when developing a program: investing and reflecting, designing, prototyping, and testing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A development process that is iterative requires refinement and revision based on feedback, testing, or reflection throughout the process. This may require revisiting earlier phases of the process.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A development process that is incremental is one that breaks the problem into smaller pieces and makes sure each piece works before adding it to the whole.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The design of a program incorporates investigation to determine its requirements.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Investigation in a development process is useful for understanding and identifying the program constraints, as well as the concerns and interests of the people who will use the program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Some ways investigation can be performed are as follows: collecting data through surveys, user testing, interviews, and direct observations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program requirements describe how a program functions and may include a description of user interactions that a program must provide.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A program\\u2019s specification defines the requirements for the program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In a development process, the design phase outlines how to accomplish a given program specification.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The design phase of a program may include: brainstorming, planning and storyboarding, organizing the program into modules and functional components.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creation of diagrams that represent the layouts of the user interface.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Development of a testing strategy for the program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program documentation is a written description of the function of a code segment, event, procedure, or program and how it was developed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comments are a form of program documentation written into the program to be read by people and do not affect how a program runs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Programmers should document a program throughout its development.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program documentation helps in developing and maintaining correct programs when working individually or in collaborative programming environments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not all programming environments support comments, so other methods of documentation may be required.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is important to acknowledge any code segments that were developed collaboratively or by another source.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Acknowledgement of a code segment(s) written by someone else and used in a program can be in the program documentation. The acknowledgement should include the origin or original author\\u2019s name.\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"4. Identifying and Correcting Errors\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Programs can have various errors, including:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Logic errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Syntax errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run-time errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Overflow errors\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The following are effective ways to find and correct errors:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test cases\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hand tracing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Visualizations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debuggers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding extra output statement(s)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When testing a program, you must identify program requirements.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Defined inputs used to test a program should demonstrate different expected outcomes that are at or just beyond the extremes (minimum and maximum) of input data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test cases not only test to verify that programs produce the expected outcomes; they can be used to help programmers revise their algorithms or programs.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#creative-development-review","title":"Creative Development Review","items":[{"url":"#1-collaboration","title":"1. Collaboration"},{"url":"#2-program-function-and-purpose","title":"2. Program Function and Purpose"},{"url":"#3-program-design-and-development","title":"3. Program Design and Development"},{"url":"#4-identifying-and-correcting-errors","title":"4. Identifying and Correcting Errors"}]}]},"timeToRead":3,"parent":{"__typename":"File","relativePath":"unit-8/review-pages/creative-development.md","fields":{"gitLogLatestAuthorName":"Galen Nickel","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"3 minutes ago"}},"frontmatter":{"metaTitle":"Creative Development","showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"e58d2182e4eda146f44eef3444eafe44c346237f","date":"2023-08-18 08:59"}},"pageContext":{"id":"eb7843ea-5870-560a-a819-d52933075588"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}