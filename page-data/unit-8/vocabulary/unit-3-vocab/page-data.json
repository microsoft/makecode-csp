{"componentChunkName":"component---src-templates-docs-js","path":"/unit-8/vocabulary/unit-3-vocab","result":{"data":{"site":{"siteMetadata":{"title":"MakeCode AP CSP","docsLocation":"https://github.com/microsoft/makecode-csp","docsLocationType":"github","editable":false}},"mdx":{"fields":{"id":"6155e545-a4a8-55d0-bedf-85761b92d089","title":"Unit 3 Vocab","slug":"/unit-8/vocabulary/unit-3-vocab"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unit 3 Vocab\",\n  \"metaTitle\": \"Unit 3 Vocab\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Algorithm\"), \" - a finite set of instructions that accomplish a specific task\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Code statement\"), \" - a part of program code that expresses an action to be carried out\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Expression\"), \" - can consist of a value, a variable, an operator, or a procedure call that returns a value; expressions are evaluated to produce a single value\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Execute\"), \" - the process of running a computer software program, script, or command\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Behavior\"), \" - how a program functions during execution; often described by how a user interacts with it\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program inputs\"), \" - data sent to a computer for processing by a program; it can come in a variety of forms, such as tactile, audio, visual, or text\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program outputs\"), \" - any data sent from a program to a device; can come in a variety of forms, such as tactile, audio, visual, or text\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Event\"), \" - an occurrence; things that happen; usually associated with an action (i.e. mouse click, button pressed)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Event handler\"), \" - a part of code that 'handles' or listens for a specific type of event; when that event occurs, the code inside the event handler is run\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Program documentation\"), \" - a written description of the function of a code segment, event, procedure, or program and how it was developed\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Comments\"), \" - a form of program documentation written into the program that helps explain what the code is doing.  Comments in a program do not affect how a program runs\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Logic error\"), \" - a mistake in the algorithm or program that causes it to behave incorrectly or unexpectedly\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Syntax error\"), \" - a mistake in the program where the rules of the programming language are not followed\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Run-time error\"), \" - a mistake in the program that occurs during the execution of a program; programming languages define their own run-time errors\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Overflow error\"), \" - an error that occurs when a computer attempts to handle a number that is outside of the defined range of values\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Testing\"), \" - using defined inputs to ensure that an algorithm or program is producing the expected outcomes, in the development process\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sequencing\"), \" - the application of each step of an algorithm in the order in which the code statements are given\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Selection\"), \" - determines which part of an algorithm are executed based on a condition being true or false\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Nested conditional statements\"), \" - consist of conditional statements within conditional statements\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Iteration\"), \" - a repeating portion of an algorithm; iteration repeats a specified number of times or until a given condition is met\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Variable\"), \" - an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be an array/list or other collection that in turn contains multiple values\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Variable types\"), \" - some programming languages provide types to represent data. These types include numbers, Booleans, arrays/lists, and strings\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Element\"), \" - an individual value in an array/list that is assigned a unique index\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Index\"), \" - a common method for referencing the elements in a list or string using natural numbers\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"String\"), \" - an ordered sequence of characters\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"String concatenation\"), \" - joins together two or more strings end-to-end to make a new string\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Substring\"), \" - part of an existing string\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Boolean value\"), \" - a variable that is either true or false\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Data abstraction\"), \" - provides a separation between the abstract properties of a data type and the concrete details of its representation; manages complexity in programs by giving a collection of data a name without referencing the specific details of the representation\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"timeToRead":2,"parent":{"__typename":"File","relativePath":"unit-8/vocabulary/unit-3-vocab.md","fields":{"gitLogLatestAuthorName":"Galen Nickel","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"3 minutes ago"}},"frontmatter":{"metaTitle":"Unit 3 Vocab","showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"e58d2182e4eda146f44eef3444eafe44c346237f","date":"2023-08-18 08:59"}},"pageContext":{"id":"6155e545-a4a8-55d0-bedf-85761b92d089"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}